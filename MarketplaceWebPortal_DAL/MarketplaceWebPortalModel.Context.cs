//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarketplaceWebPortal_DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MarketplaceWebPortalDataEntities : DbContext
    {
        public MarketplaceWebPortalDataEntities()
            : base("name=MarketplaceWebPortalDataEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblApplication> tblApplications { get; set; }
        public virtual DbSet<tblCategory> tblCategories { get; set; }
        public virtual DbSet<tblConsumer> tblConsumers { get; set; }
        public virtual DbSet<tblFilter> tblFilters { get; set; }
        public virtual DbSet<tblManufacturer> tblManufacturers { get; set; }
        public virtual DbSet<tblMountingLocation> tblMountingLocations { get; set; }
        public virtual DbSet<tblProduct> tblProducts { get; set; }
        public virtual DbSet<tblSubCategory> tblSubCategories { get; set; }
        public virtual DbSet<tblTechSpec> tblTechSpecs { get; set; }
        public virtual DbSet<tblTechSpecFilter> tblTechSpecFilters { get; set; }
        public virtual DbSet<tblUseType> tblUseTypes { get; set; }
        public virtual DbSet<view_FilterTable> view_FilterTable { get; set; }
        public virtual DbSet<tblTechnicalSpecifiactionNonValue> tblTechnicalSpecifiactionNonValues { get; set; }
        public virtual DbSet<tblTechnicalSpecifiactionNonValue1> tblTechnicalSpecifiactionNonValue1 { get; set; }
        public virtual DbSet<tblTechnicalSpecifiactionNonValue2> tblTechnicalSpecifiactionNonValue2 { get; set; }
        public virtual DbSet<sysdiagram2> sysdiagram2 { get; set; }
        public virtual DbSet<tblTechnicalSpecifiactionNonValue3> tblTechnicalSpecifiactionNonValue3 { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_FanSubCategoryFilter_Result> sp_FanSubCategoryFilter(Nullable<short> modelYearMin, Nullable<short> modelYearMax)
        {
            var modelYearMinParameter = modelYearMin.HasValue ?
                new ObjectParameter("ModelYearMin", modelYearMin) :
                new ObjectParameter("ModelYearMin", typeof(short));
    
            var modelYearMaxParameter = modelYearMax.HasValue ?
                new ObjectParameter("ModelYearMax", modelYearMax) :
                new ObjectParameter("ModelYearMax", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FanSubCategoryFilter_Result>("sp_FanSubCategoryFilter", modelYearMinParameter, modelYearMaxParameter);
        }
    
        public virtual ObjectResult<sp_GetAllCategories_Result> sp_GetAllCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllCategories_Result>("sp_GetAllCategories");
        }
    
        public virtual ObjectResult<string> sp_GetAllCategoryNames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetAllCategoryNames");
        }
    
        public virtual ObjectResult<sp_GetAllSubCategories_Result> sp_GetAllSubCategories(string categoryName)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllSubCategories_Result>("sp_GetAllSubCategories", categoryNameParameter);
        }
    
        public virtual int sp_GetProductCompare(Nullable<int> product_ID)
        {
            var product_IDParameter = product_ID.HasValue ?
                new ObjectParameter("Product_ID", product_ID) :
                new ObjectParameter("Product_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetProductCompare", product_IDParameter);
        }
    
        public virtual ObjectResult<sp_GetProductSummaryDescription_Result> sp_GetProductSummaryDescription(Nullable<int> product_ID)
        {
            var product_IDParameter = product_ID.HasValue ?
                new ObjectParameter("Product_ID", product_ID) :
                new ObjectParameter("Product_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProductSummaryDescription_Result>("sp_GetProductSummaryDescription", product_IDParameter);
        }
    
        public virtual int sp_GetProductSummaryTechSpec(Nullable<int> product_ID)
        {
            var product_IDParameter = product_ID.HasValue ?
                new ObjectParameter("Product_ID", product_ID) :
                new ObjectParameter("Product_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetProductSummaryTechSpec", product_IDParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_RegisterUser(string userName, string email, string password, string image)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RegisterUser", userNameParameter, emailParameter, passwordParameter, imageParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<sp_UserValidation_Result> sp_UserValidation(string input, string password)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserValidation_Result>("sp_UserValidation", inputParameter, passwordParameter);
        }
    
        public virtual ObjectResult<sp_FanFilter_Result> sp_FanFilter(string subCategoryName, Nullable<double> minPower, Nullable<double> maxPower)
        {
            var subCategoryNameParameter = subCategoryName != null ?
                new ObjectParameter("SubCategoryName", subCategoryName) :
                new ObjectParameter("SubCategoryName", typeof(string));
    
            var minPowerParameter = minPower.HasValue ?
                new ObjectParameter("minPower", minPower) :
                new ObjectParameter("minPower", typeof(double));
    
            var maxPowerParameter = maxPower.HasValue ?
                new ObjectParameter("maxPower", maxPower) :
                new ObjectParameter("maxPower", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FanFilter_Result>("sp_FanFilter", subCategoryNameParameter, minPowerParameter, maxPowerParameter);
        }
    
        public virtual ObjectResult<sp_FanHeightFilter_Result> sp_FanHeightFilter(string subCategoryName, Nullable<double> minHeight, Nullable<double> maxHeight, Nullable<short> minDate, Nullable<short> maxDate)
        {
            var subCategoryNameParameter = subCategoryName != null ?
                new ObjectParameter("SubCategoryName", subCategoryName) :
                new ObjectParameter("SubCategoryName", typeof(string));
    
            var minHeightParameter = minHeight.HasValue ?
                new ObjectParameter("minHeight", minHeight) :
                new ObjectParameter("minHeight", typeof(double));
    
            var maxHeightParameter = maxHeight.HasValue ?
                new ObjectParameter("maxHeight", maxHeight) :
                new ObjectParameter("maxHeight", typeof(double));
    
            var minDateParameter = minDate.HasValue ?
                new ObjectParameter("minDate", minDate) :
                new ObjectParameter("minDate", typeof(short));
    
            var maxDateParameter = maxDate.HasValue ?
                new ObjectParameter("maxDate", maxDate) :
                new ObjectParameter("maxDate", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FanHeightFilter_Result>("sp_FanHeightFilter", subCategoryNameParameter, minHeightParameter, maxHeightParameter, minDateParameter, maxDateParameter);
        }
    
        public virtual ObjectResult<sp_FanPoweFilter_Result> sp_FanPoweFilter(string subCategoryName, Nullable<double> minPower, Nullable<double> maxPower, Nullable<short> minDate, Nullable<short> maxDate)
        {
            var subCategoryNameParameter = subCategoryName != null ?
                new ObjectParameter("SubCategoryName", subCategoryName) :
                new ObjectParameter("SubCategoryName", typeof(string));
    
            var minPowerParameter = minPower.HasValue ?
                new ObjectParameter("minPower", minPower) :
                new ObjectParameter("minPower", typeof(double));
    
            var maxPowerParameter = maxPower.HasValue ?
                new ObjectParameter("maxPower", maxPower) :
                new ObjectParameter("maxPower", typeof(double));
    
            var minDateParameter = minDate.HasValue ?
                new ObjectParameter("minDate", minDate) :
                new ObjectParameter("minDate", typeof(short));
    
            var maxDateParameter = maxDate.HasValue ?
                new ObjectParameter("maxDate", maxDate) :
                new ObjectParameter("maxDate", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FanPoweFilter_Result>("sp_FanPoweFilter", subCategoryNameParameter, minPowerParameter, maxPowerParameter, minDateParameter, maxDateParameter);
        }
    
        public virtual ObjectResult<sp_FanSpeedFilter_Result> sp_FanSpeedFilter(string subCategoryName, Nullable<double> minSpeed, Nullable<double> maxSpeed, Nullable<short> minDate, Nullable<short> maxDate)
        {
            var subCategoryNameParameter = subCategoryName != null ?
                new ObjectParameter("SubCategoryName", subCategoryName) :
                new ObjectParameter("SubCategoryName", typeof(string));
    
            var minSpeedParameter = minSpeed.HasValue ?
                new ObjectParameter("minSpeed", minSpeed) :
                new ObjectParameter("minSpeed", typeof(double));
    
            var maxSpeedParameter = maxSpeed.HasValue ?
                new ObjectParameter("maxSpeed", maxSpeed) :
                new ObjectParameter("maxSpeed", typeof(double));
    
            var minDateParameter = minDate.HasValue ?
                new ObjectParameter("minDate", minDate) :
                new ObjectParameter("minDate", typeof(short));
    
            var maxDateParameter = maxDate.HasValue ?
                new ObjectParameter("maxDate", maxDate) :
                new ObjectParameter("maxDate", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FanSpeedFilter_Result>("sp_FanSpeedFilter", subCategoryNameParameter, minSpeedParameter, maxSpeedParameter, minDateParameter, maxDateParameter);
        }
    
        public virtual ObjectResult<sp_FanSubCategorySetFilter_Result> sp_FanSubCategorySetFilter(Nullable<short> modelYearMin, Nullable<short> modelYearMax)
        {
            var modelYearMinParameter = modelYearMin.HasValue ?
                new ObjectParameter("ModelYearMin", modelYearMin) :
                new ObjectParameter("ModelYearMin", typeof(short));
    
            var modelYearMaxParameter = modelYearMax.HasValue ?
                new ObjectParameter("ModelYearMax", modelYearMax) :
                new ObjectParameter("ModelYearMax", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FanSubCategorySetFilter_Result>("sp_FanSubCategorySetFilter", modelYearMinParameter, modelYearMaxParameter);
        }
    
        public virtual ObjectResult<sp_FanVoltageFilter_Result> sp_FanVoltageFilter(string subCategoryName, Nullable<double> minVoltage, Nullable<double> maxVoltage, Nullable<short> minDate, Nullable<short> maxDate)
        {
            var subCategoryNameParameter = subCategoryName != null ?
                new ObjectParameter("SubCategoryName", subCategoryName) :
                new ObjectParameter("SubCategoryName", typeof(string));
    
            var minVoltageParameter = minVoltage.HasValue ?
                new ObjectParameter("minVoltage", minVoltage) :
                new ObjectParameter("minVoltage", typeof(double));
    
            var maxVoltageParameter = maxVoltage.HasValue ?
                new ObjectParameter("maxVoltage", maxVoltage) :
                new ObjectParameter("maxVoltage", typeof(double));
    
            var minDateParameter = minDate.HasValue ?
                new ObjectParameter("minDate", minDate) :
                new ObjectParameter("minDate", typeof(short));
    
            var maxDateParameter = maxDate.HasValue ?
                new ObjectParameter("maxDate", maxDate) :
                new ObjectParameter("maxDate", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FanVoltageFilter_Result>("sp_FanVoltageFilter", subCategoryNameParameter, minVoltageParameter, maxVoltageParameter, minDateParameter, maxDateParameter);
        }
    
        public virtual ObjectResult<sp_SofaLengthFilter_Result> sp_SofaLengthFilter(string subCategoryName, Nullable<double> minLength, Nullable<double> maxLength, Nullable<short> minDate, Nullable<short> maxDate)
        {
            var subCategoryNameParameter = subCategoryName != null ?
                new ObjectParameter("SubCategoryName", subCategoryName) :
                new ObjectParameter("SubCategoryName", typeof(string));
    
            var minLengthParameter = minLength.HasValue ?
                new ObjectParameter("minLength", minLength) :
                new ObjectParameter("minLength", typeof(double));
    
            var maxLengthParameter = maxLength.HasValue ?
                new ObjectParameter("maxLength", maxLength) :
                new ObjectParameter("maxLength", typeof(double));
    
            var minDateParameter = minDate.HasValue ?
                new ObjectParameter("minDate", minDate) :
                new ObjectParameter("minDate", typeof(short));
    
            var maxDateParameter = maxDate.HasValue ?
                new ObjectParameter("maxDate", maxDate) :
                new ObjectParameter("maxDate", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SofaLengthFilter_Result>("sp_SofaLengthFilter", subCategoryNameParameter, minLengthParameter, maxLengthParameter, minDateParameter, maxDateParameter);
        }
    
        public virtual ObjectResult<sp_SofaSubCategorySetFilter_Result> sp_SofaSubCategorySetFilter(Nullable<short> modelYearMin, Nullable<short> modelYearMax)
        {
            var modelYearMinParameter = modelYearMin.HasValue ?
                new ObjectParameter("ModelYearMin", modelYearMin) :
                new ObjectParameter("ModelYearMin", typeof(short));
    
            var modelYearMaxParameter = modelYearMax.HasValue ?
                new ObjectParameter("ModelYearMax", modelYearMax) :
                new ObjectParameter("ModelYearMax", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SofaSubCategorySetFilter_Result>("sp_SofaSubCategorySetFilter", modelYearMinParameter, modelYearMaxParameter);
        }
    
        public virtual ObjectResult<sp_TabletRAMFilter_Result> sp_TabletRAMFilter(string subCategoryName, Nullable<double> minRAM, Nullable<double> maxRAM, Nullable<short> minDate, Nullable<short> maxDate)
        {
            var subCategoryNameParameter = subCategoryName != null ?
                new ObjectParameter("SubCategoryName", subCategoryName) :
                new ObjectParameter("SubCategoryName", typeof(string));
    
            var minRAMParameter = minRAM.HasValue ?
                new ObjectParameter("minRAM", minRAM) :
                new ObjectParameter("minRAM", typeof(double));
    
            var maxRAMParameter = maxRAM.HasValue ?
                new ObjectParameter("maxRAM", maxRAM) :
                new ObjectParameter("maxRAM", typeof(double));
    
            var minDateParameter = minDate.HasValue ?
                new ObjectParameter("minDate", minDate) :
                new ObjectParameter("minDate", typeof(short));
    
            var maxDateParameter = maxDate.HasValue ?
                new ObjectParameter("maxDate", maxDate) :
                new ObjectParameter("maxDate", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TabletRAMFilter_Result>("sp_TabletRAMFilter", subCategoryNameParameter, minRAMParameter, maxRAMParameter, minDateParameter, maxDateParameter);
        }
    
        public virtual ObjectResult<sp_TabletScreenFilter_Result> sp_TabletScreenFilter(string subCategoryName, Nullable<double> minScreen, Nullable<double> maxScreen, Nullable<short> minDate, Nullable<short> maxDate)
        {
            var subCategoryNameParameter = subCategoryName != null ?
                new ObjectParameter("SubCategoryName", subCategoryName) :
                new ObjectParameter("SubCategoryName", typeof(string));
    
            var minScreenParameter = minScreen.HasValue ?
                new ObjectParameter("minScreen", minScreen) :
                new ObjectParameter("minScreen", typeof(double));
    
            var maxScreenParameter = maxScreen.HasValue ?
                new ObjectParameter("maxScreen", maxScreen) :
                new ObjectParameter("maxScreen", typeof(double));
    
            var minDateParameter = minDate.HasValue ?
                new ObjectParameter("minDate", minDate) :
                new ObjectParameter("minDate", typeof(short));
    
            var maxDateParameter = maxDate.HasValue ?
                new ObjectParameter("maxDate", maxDate) :
                new ObjectParameter("maxDate", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TabletScreenFilter_Result>("sp_TabletScreenFilter", subCategoryNameParameter, minScreenParameter, maxScreenParameter, minDateParameter, maxDateParameter);
        }
    
        public virtual ObjectResult<sp_TabletStorageFilter_Result> sp_TabletStorageFilter(string subCategoryName, Nullable<double> minStorage, Nullable<double> maxStorage, Nullable<short> minDate, Nullable<short> maxDate)
        {
            var subCategoryNameParameter = subCategoryName != null ?
                new ObjectParameter("SubCategoryName", subCategoryName) :
                new ObjectParameter("SubCategoryName", typeof(string));
    
            var minStorageParameter = minStorage.HasValue ?
                new ObjectParameter("minStorage", minStorage) :
                new ObjectParameter("minStorage", typeof(double));
    
            var maxStorageParameter = maxStorage.HasValue ?
                new ObjectParameter("maxStorage", maxStorage) :
                new ObjectParameter("maxStorage", typeof(double));
    
            var minDateParameter = minDate.HasValue ?
                new ObjectParameter("minDate", minDate) :
                new ObjectParameter("minDate", typeof(short));
    
            var maxDateParameter = maxDate.HasValue ?
                new ObjectParameter("maxDate", maxDate) :
                new ObjectParameter("maxDate", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TabletStorageFilter_Result>("sp_TabletStorageFilter", subCategoryNameParameter, minStorageParameter, maxStorageParameter, minDateParameter, maxDateParameter);
        }
    
        public virtual ObjectResult<sp_TabletSubCategorySetFilter_Result> sp_TabletSubCategorySetFilter(Nullable<short> modelYearMin, Nullable<short> modelYearMax)
        {
            var modelYearMinParameter = modelYearMin.HasValue ?
                new ObjectParameter("ModelYearMin", modelYearMin) :
                new ObjectParameter("ModelYearMin", typeof(short));
    
            var modelYearMaxParameter = modelYearMax.HasValue ?
                new ObjectParameter("ModelYearMax", modelYearMax) :
                new ObjectParameter("ModelYearMax", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TabletSubCategorySetFilter_Result>("sp_TabletSubCategorySetFilter", modelYearMinParameter, modelYearMaxParameter);
        }
    
        public virtual ObjectResult<string> sp_GetSubCategoryByCategoryName(string categoryName)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetSubCategoryByCategoryName", categoryNameParameter);
        }
    
        public virtual ObjectResult<sp_FanSetFilter_Result> sp_FanSetFilter(Nullable<short> modelYearMin, Nullable<short> modelYearMax)
        {
            var modelYearMinParameter = modelYearMin.HasValue ?
                new ObjectParameter("ModelYearMin", modelYearMin) :
                new ObjectParameter("ModelYearMin", typeof(short));
    
            var modelYearMaxParameter = modelYearMax.HasValue ?
                new ObjectParameter("ModelYearMax", modelYearMax) :
                new ObjectParameter("ModelYearMax", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FanSetFilter_Result>("sp_FanSetFilter", modelYearMinParameter, modelYearMaxParameter);
        }
    }
}
